/// <reference path="../../typings/app.d.ts" />
var app;
(function (app) {
    var components;
    (function (components) {
        var stacktrace;
        (function (stacktrace) {
            'use strict';
            var StacktraceService = (function () {
                function StacktraceService() {
                    this.print = printStackTrace;
                }
                StacktraceService.prototype.getLocalStackTrace = function (callerName) {
                    if (callerName == null) {
                        callerName = 'Stacktrace';
                    }
                    else {
                        callerName = 'Stacktrace: ' + callerName;
                    }
                    var stackFrames = printStackTrace();
                    var frames = [];
                    for (var i = 0; i < stackFrames.length; i++) {
                        var frameStr = stackFrames[i];
                        if (frameStr.startsWith('Object.printStackTrace')) {
                            continue;
                        }
                        var frame = this.parseFrame(frameStr);
                        if (frame.path.contains('bower_components') || frame.func.endsWith('getLocalStackTrace') || frame.file === 'stacktrace-service.js' || frame.file === 'profile-service.js') {
                            continue;
                        }
                        frames.push(frame);
                    }
                    return frames;
                };
                // Takes a string, as generated by stacktrace.js
                // and parses it into a well-defined frame object
                StacktraceService.prototype.parseFrame = function (frame) {
                    var atIdx = frame.indexOf('@');
                    var func = frame.substring(0, atIdx);
                    // The calling function usually has a spurious object prepended
                    // let's drop it
                    var fullSt = func.indexOf('.');
                    if (fullSt > 0) {
                        func = func.substring(fullSt + 1);
                    }
                    var loc = frame.substring(atIdx + 1);
                    var lastSlash = loc.lastIndexOf('/');
                    var path = loc.substring(0, lastSlash);
                    var fileAndSpec = loc.substring(lastSlash + 1);
                    var colon = fileAndSpec.indexOf(':');
                    var file = fileAndSpec.substring(0, colon);
                    var spec = fileAndSpec.substring(colon + 1);
                    colon = spec.indexOf(':');
                    var line = spec.substring(0, colon);
                    var col = spec.substring(colon + 1);
                    return {
                        path: path,
                        file: file,
                        func: func,
                        line: line,
                        col: col,
                    };
                };
                return StacktraceService;
            })();
            stacktrace.StacktraceService = StacktraceService;
            var m = app.Module.load('app.components.stacktrace');
            m.addService('StacktraceService', StacktraceService);
        })(stacktrace = components.stacktrace || (components.stacktrace = {}));
    })(components = app.components || (app.components = {}));
})(app || (app = {}));

//# sourceMappingURL=data:application/json;base64,