/// <reference path="typings/app.d.ts" />
var app;
(function (app) {
    // Utility Module class for streamlining angular module/route creation
    var Module = (function () {
        function Module(name, modules) {
            if (modules == null) {
                this.angularModule = angular.module(name);
            }
            else {
                this.angularModule = angular.module(name, modules);
            }
        }
        Module.create = function (name, modules) {
            return new Module(name, modules);
        };
        Module.load = function (name) {
            return new Module(name);
        };
        Module.prototype.addController = function (name, controller) {
            this.angularModule.controller(name, controller);
            return this;
        };
        Module.prototype.addFactory = function (name, factory) {
            this.angularModule.factory(name, factory);
            return this;
        };
        Module.prototype.addService = function (name, service) {
            this.angularModule.service(name, service);
            return this;
        };
        Module.prototype.addDirective = function (name, directive) {
            this.angularModule.directive(name, directive);
            return this;
        };
        Module.prototype.addProvider = function (name, provider) {
            this.angularModule.provider(name, provider);
            return this;
        };
        Module.prototype.config = function (configBlock) {
            this.angularModule.config(configBlock);
            return this;
        };
        Module.prototype.run = function (runBlock) {
            this.angularModule.run(runBlock);
            return this;
        };
        return Module;
    })();
    app.Module = Module;
})(app || (app = {}));
// Monkey-patch useful methods onto String & Array classes
var nullOrEmptyFn = function (obj) {
    return obj == null || obj.length == null || obj.length === 0;
};
Array.nullOrEmpty = nullOrEmptyFn;
String.nullOrEmpty = nullOrEmptyFn;
String.prototype.contains = function (s) {
    return String.prototype.indexOf.apply(this, arguments) !== -1;
};
String.prototype.startsWith = function (prefix) {
    return this.indexOf(prefix, 0) === 0;
};
String.prototype.endsWith = function (suffix) {
    if (this == null || this.length === 0 || suffix == null || suffix.length === 0)
        return false;
    return this.indexOf(suffix, this.length - suffix.length) === 0;
};
if (!String.prototype.contains) {
    String.prototype.contains = function () {
        return String.prototype.indexOf.apply(this, arguments) !== -1;
    };
}
// quick hashCode method for String
String.prototype.hashCode = function () {
    var hash = 0, chr, i, len;
    if (this.length === 0)
        return hash;
    for (i = 0; i < this.length; i++) {
        chr = this.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
};
// Wow. Apparently Phantom JS's defininition for a dom's Node object
// does not contain an implementation for contains(). So, define it here . . .
if (!Node.prototype.contains) {
    Node.prototype.contains = function (el) {
        while (el != null) {
            if (el === this) {
                return true;
            }
            el = el.parentNode;
        }
        return false;
    };
}

//# sourceMappingURL=data:application/json;base64,